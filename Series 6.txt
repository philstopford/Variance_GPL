Changelog for Variance

6.1

	- Avoided hang-on-quit issue with GTK when file dialogs have been shown.
	- Fixed viewport drawing of lines (it would close them to make polygons).
	- Fixed viewport keyboard handling.

6.1b5

	- GeoCore enhancements.
	 - Repetition evaluation system was overhauled, to properly retain and evaluate repetition data (e.g. irregular arrays) and to avoid baking repetitions in its internal representation.
	 ! There is work planned for internal de-duplication, or compaction, in a later update.

6.1b4

	- Completed optimization work to speed up the viewport drawing.
	 - Changed drawing methodology to be much more efficient.
	  - Moved data generation into independent tasks so we can efficiently queue the work onto threads (axes, gridlines, polylines, points, filled geometry).
	  - Geometry computation now fully multi-threaded to allow peak performance for few/many polygons and sparse/dense point count.
	  - Generate/update buffers only when needed (i.e. when the viewport draws).
	  - Use more efficient draw calls based on a tweaked buffer strategy.
	- Thanks to Veldrid developer TechPizzaDev, we have a working viewport now on GTK, including for Wayland.
	 - This works with mesa threading as well, and current versions of mesa.
	 ! Vulkan is not usable under Wayland due to the need for X11 to override the contents.
	 ! Keyboard input into the viewport is not available at the moment.

6.1b3

	- GeoCore overhaul for (ir)regular array handling.
	- Working to resolve compatibility with newer mesa versions

6.1b2

	- Removed geoCore contour option: contouring is now always available.
	- Fixes to shape engine handling of orthogonal custom geometry.
	- Fix for box output in OASIS files.
	! Linux requires mesa no later than 23.1.8 to avoid crashes.

6.1b1

	- Applied a set of fixes related to issues with the viewport and recent combinations of GTK/mesa.
	 - Workaround prior to these fixes was to turn off mesa_glthread.
	- Applied a fix for a behavorial change in gap removal, where gaps/holes could be left.
	 - Seems to be related to numerical precision.

6.1a1

	- Fixed numerous UI irritations.
	 - Addressed lingering UI elements on tabs where they are not relevant.
	- Unidirectional biasing.
	 - Initial implementation.
	 - Uses Minkowski Sum via Clipper 2.
	 - Supports either axis.
	 - Supports application before or after rotation.
	 - Validated wobble on top of rotation, before and after rotation.
	 - Validated with keyholed geometry.

	 ! Testing areas:
	  - Save/load, copy/paste.
	  - n-poly output from biasing.
	   - Works fine with per-poly rotation and before/after rotation.
	   ! Sort of works overall, but union is only seen on one pair, oddly.
	  ! Need to ensure the total rotation is set with any rotation/wobble change.

6.0

	- Moved to NET 7.
	- Performance overall is +25-35% compared to Variance 5.0, with no change in results reported.

6.0a2

	- Moved ClipperD to set precision based on a constant for 4 decimal places (internal scaling inside Clipper).
	- Moved various offsetting approaches to use InflatePaths() with a precision value of 4, to scale with enough resolution.
	 - The precision changes should address the donut proximity issue where one point is not showing a bias, where the default precision in Clipper was insufficient and caused the ray to be offset from its original location after clipping. Started with a value of 4 compared to the default value of 2.
	- Moving to avoid all conversion/scaling that isn't needed.
	- Significant re-engineering across the systems due to move to doubles from a mixed pipeline.
	- Review ongoing:
	 - No apparent compatibility breakage with project files.
	 - Basic shape engine appears to work. Ongoing review:
	  - Shape construction internals all work.
	  - Corner rouding works.
	  - Rotation works.
	  - Noise works.
	  - Resolved proximity biasing and keyhole issues.
	  - Resolved an issue where extra geometry was being added in the customShape_orthogonal pipeline.
	  - Resolved an issue and added clarification within the keyhole removal sequence (insufficient biasing).
	 - All calculations appear to work and give sensible results.
	- Runtime benchmarking shows performance gain of up to 35%, with no change in results.
	- GeoCore output/input seems to be fine.
	- Disabled export button for not-enabled, as this will result in empty layout files and cause user confusion.
	- Enhancements and fixes in GeoCore
	 - Fixed circle detection/creation.
	 - Fixed polygon output in GDSII.

	! Need to review all explicit copy-via-new usage in the new code. This was a defensive-first approach, but is likely excessive.
	! Need to review potential double transforms for boolean/geoCore data. Not pinned down yet.

6.0a1

	- Moving all geometry to work from Clipper primitives (Point64, PointD, Path64, PathD, Paths64, PathsD).
	 - This is intended to test the initial plan to consolidate geometry and allow for all representations to be Clipper-ready at any point.
	  - End goal is to eliminate conversions/scalings that are not absolutely necessary.
	 - Debugged analysis and viewport interactions with new data representations.
	  - Shows a decent gain in performance already with this change (~490 seconds to 435 seconds)

	! a2 will work to drop PointD <-> Point64 transitions via scaling to see what we can gain there.

